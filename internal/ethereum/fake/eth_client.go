// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"fethcher/internal/ethereum"
	"math/big"
	"sync"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
)

type EthClient struct {
	NetworkIDStub        func(context.Context) (*big.Int, error)
	networkIDMutex       sync.RWMutex
	networkIDArgsForCall []struct {
		arg1 context.Context
	}
	networkIDReturns struct {
		result1 *big.Int
		result2 error
	}
	networkIDReturnsOnCall map[int]struct {
		result1 *big.Int
		result2 error
	}
	TransactionByHashStub        func(context.Context, common.Hash) (*types.Transaction, bool, error)
	transactionByHashMutex       sync.RWMutex
	transactionByHashArgsForCall []struct {
		arg1 context.Context
		arg2 common.Hash
	}
	transactionByHashReturns struct {
		result1 *types.Transaction
		result2 bool
		result3 error
	}
	transactionByHashReturnsOnCall map[int]struct {
		result1 *types.Transaction
		result2 bool
		result3 error
	}
	TransactionReceiptStub        func(context.Context, common.Hash) (*types.Receipt, error)
	transactionReceiptMutex       sync.RWMutex
	transactionReceiptArgsForCall []struct {
		arg1 context.Context
		arg2 common.Hash
	}
	transactionReceiptReturns struct {
		result1 *types.Receipt
		result2 error
	}
	transactionReceiptReturnsOnCall map[int]struct {
		result1 *types.Receipt
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *EthClient) NetworkID(arg1 context.Context) (*big.Int, error) {
	fake.networkIDMutex.Lock()
	ret, specificReturn := fake.networkIDReturnsOnCall[len(fake.networkIDArgsForCall)]
	fake.networkIDArgsForCall = append(fake.networkIDArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.NetworkIDStub
	fakeReturns := fake.networkIDReturns
	fake.recordInvocation("NetworkID", []interface{}{arg1})
	fake.networkIDMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *EthClient) NetworkIDCallCount() int {
	fake.networkIDMutex.RLock()
	defer fake.networkIDMutex.RUnlock()
	return len(fake.networkIDArgsForCall)
}

func (fake *EthClient) NetworkIDCalls(stub func(context.Context) (*big.Int, error)) {
	fake.networkIDMutex.Lock()
	defer fake.networkIDMutex.Unlock()
	fake.NetworkIDStub = stub
}

func (fake *EthClient) NetworkIDArgsForCall(i int) context.Context {
	fake.networkIDMutex.RLock()
	defer fake.networkIDMutex.RUnlock()
	argsForCall := fake.networkIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *EthClient) NetworkIDReturns(result1 *big.Int, result2 error) {
	fake.networkIDMutex.Lock()
	defer fake.networkIDMutex.Unlock()
	fake.NetworkIDStub = nil
	fake.networkIDReturns = struct {
		result1 *big.Int
		result2 error
	}{result1, result2}
}

func (fake *EthClient) NetworkIDReturnsOnCall(i int, result1 *big.Int, result2 error) {
	fake.networkIDMutex.Lock()
	defer fake.networkIDMutex.Unlock()
	fake.NetworkIDStub = nil
	if fake.networkIDReturnsOnCall == nil {
		fake.networkIDReturnsOnCall = make(map[int]struct {
			result1 *big.Int
			result2 error
		})
	}
	fake.networkIDReturnsOnCall[i] = struct {
		result1 *big.Int
		result2 error
	}{result1, result2}
}

func (fake *EthClient) TransactionByHash(arg1 context.Context, arg2 common.Hash) (*types.Transaction, bool, error) {
	fake.transactionByHashMutex.Lock()
	ret, specificReturn := fake.transactionByHashReturnsOnCall[len(fake.transactionByHashArgsForCall)]
	fake.transactionByHashArgsForCall = append(fake.transactionByHashArgsForCall, struct {
		arg1 context.Context
		arg2 common.Hash
	}{arg1, arg2})
	stub := fake.TransactionByHashStub
	fakeReturns := fake.transactionByHashReturns
	fake.recordInvocation("TransactionByHash", []interface{}{arg1, arg2})
	fake.transactionByHashMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *EthClient) TransactionByHashCallCount() int {
	fake.transactionByHashMutex.RLock()
	defer fake.transactionByHashMutex.RUnlock()
	return len(fake.transactionByHashArgsForCall)
}

func (fake *EthClient) TransactionByHashCalls(stub func(context.Context, common.Hash) (*types.Transaction, bool, error)) {
	fake.transactionByHashMutex.Lock()
	defer fake.transactionByHashMutex.Unlock()
	fake.TransactionByHashStub = stub
}

func (fake *EthClient) TransactionByHashArgsForCall(i int) (context.Context, common.Hash) {
	fake.transactionByHashMutex.RLock()
	defer fake.transactionByHashMutex.RUnlock()
	argsForCall := fake.transactionByHashArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *EthClient) TransactionByHashReturns(result1 *types.Transaction, result2 bool, result3 error) {
	fake.transactionByHashMutex.Lock()
	defer fake.transactionByHashMutex.Unlock()
	fake.TransactionByHashStub = nil
	fake.transactionByHashReturns = struct {
		result1 *types.Transaction
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *EthClient) TransactionByHashReturnsOnCall(i int, result1 *types.Transaction, result2 bool, result3 error) {
	fake.transactionByHashMutex.Lock()
	defer fake.transactionByHashMutex.Unlock()
	fake.TransactionByHashStub = nil
	if fake.transactionByHashReturnsOnCall == nil {
		fake.transactionByHashReturnsOnCall = make(map[int]struct {
			result1 *types.Transaction
			result2 bool
			result3 error
		})
	}
	fake.transactionByHashReturnsOnCall[i] = struct {
		result1 *types.Transaction
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *EthClient) TransactionReceipt(arg1 context.Context, arg2 common.Hash) (*types.Receipt, error) {
	fake.transactionReceiptMutex.Lock()
	ret, specificReturn := fake.transactionReceiptReturnsOnCall[len(fake.transactionReceiptArgsForCall)]
	fake.transactionReceiptArgsForCall = append(fake.transactionReceiptArgsForCall, struct {
		arg1 context.Context
		arg2 common.Hash
	}{arg1, arg2})
	stub := fake.TransactionReceiptStub
	fakeReturns := fake.transactionReceiptReturns
	fake.recordInvocation("TransactionReceipt", []interface{}{arg1, arg2})
	fake.transactionReceiptMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *EthClient) TransactionReceiptCallCount() int {
	fake.transactionReceiptMutex.RLock()
	defer fake.transactionReceiptMutex.RUnlock()
	return len(fake.transactionReceiptArgsForCall)
}

func (fake *EthClient) TransactionReceiptCalls(stub func(context.Context, common.Hash) (*types.Receipt, error)) {
	fake.transactionReceiptMutex.Lock()
	defer fake.transactionReceiptMutex.Unlock()
	fake.TransactionReceiptStub = stub
}

func (fake *EthClient) TransactionReceiptArgsForCall(i int) (context.Context, common.Hash) {
	fake.transactionReceiptMutex.RLock()
	defer fake.transactionReceiptMutex.RUnlock()
	argsForCall := fake.transactionReceiptArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *EthClient) TransactionReceiptReturns(result1 *types.Receipt, result2 error) {
	fake.transactionReceiptMutex.Lock()
	defer fake.transactionReceiptMutex.Unlock()
	fake.TransactionReceiptStub = nil
	fake.transactionReceiptReturns = struct {
		result1 *types.Receipt
		result2 error
	}{result1, result2}
}

func (fake *EthClient) TransactionReceiptReturnsOnCall(i int, result1 *types.Receipt, result2 error) {
	fake.transactionReceiptMutex.Lock()
	defer fake.transactionReceiptMutex.Unlock()
	fake.TransactionReceiptStub = nil
	if fake.transactionReceiptReturnsOnCall == nil {
		fake.transactionReceiptReturnsOnCall = make(map[int]struct {
			result1 *types.Receipt
			result2 error
		})
	}
	fake.transactionReceiptReturnsOnCall[i] = struct {
		result1 *types.Receipt
		result2 error
	}{result1, result2}
}

func (fake *EthClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.networkIDMutex.RLock()
	defer fake.networkIDMutex.RUnlock()
	fake.transactionByHashMutex.RLock()
	defer fake.transactionByHashMutex.RUnlock()
	fake.transactionReceiptMutex.RLock()
	defer fake.transactionReceiptMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *EthClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ethereum.EthClient = new(EthClient)
