// Code generated by counterfeiter. DO NOT EDIT.
package fake

import (
	"context"
	"fethcher/internal/repository"
	"sync"
)

type Storage struct {
	GetAllStub        func(context.Context, any) error
	getAllMutex       sync.RWMutex
	getAllArgsForCall []struct {
		arg1 context.Context
		arg2 any
	}
	getAllReturns struct {
		result1 error
	}
	getAllReturnsOnCall map[int]struct {
		result1 error
	}
	GetAllByStub        func(context.Context, string, any, any) error
	getAllByMutex       sync.RWMutex
	getAllByArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 any
		arg4 any
	}
	getAllByReturns struct {
		result1 error
	}
	getAllByReturnsOnCall map[int]struct {
		result1 error
	}
	GetOneByStub        func(context.Context, string, any, any) error
	getOneByMutex       sync.RWMutex
	getOneByArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 any
		arg4 any
	}
	getOneByReturns struct {
		result1 error
	}
	getOneByReturnsOnCall map[int]struct {
		result1 error
	}
	InsertToTableStub        func(context.Context, any) error
	insertToTableMutex       sync.RWMutex
	insertToTableArgsForCall []struct {
		arg1 context.Context
		arg2 any
	}
	insertToTableReturns struct {
		result1 error
	}
	insertToTableReturnsOnCall map[int]struct {
		result1 error
	}
	MigrateTableStub        func(...any) error
	migrateTableMutex       sync.RWMutex
	migrateTableArgsForCall []struct {
		arg1 []any
	}
	migrateTableReturns struct {
		result1 error
	}
	migrateTableReturnsOnCall map[int]struct {
		result1 error
	}
	SeedTableStub        func(context.Context, any) error
	seedTableMutex       sync.RWMutex
	seedTableArgsForCall []struct {
		arg1 context.Context
		arg2 any
	}
	seedTableReturns struct {
		result1 error
	}
	seedTableReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Storage) GetAll(arg1 context.Context, arg2 any) error {
	fake.getAllMutex.Lock()
	ret, specificReturn := fake.getAllReturnsOnCall[len(fake.getAllArgsForCall)]
	fake.getAllArgsForCall = append(fake.getAllArgsForCall, struct {
		arg1 context.Context
		arg2 any
	}{arg1, arg2})
	stub := fake.GetAllStub
	fakeReturns := fake.getAllReturns
	fake.recordInvocation("GetAll", []interface{}{arg1, arg2})
	fake.getAllMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Storage) GetAllCallCount() int {
	fake.getAllMutex.RLock()
	defer fake.getAllMutex.RUnlock()
	return len(fake.getAllArgsForCall)
}

func (fake *Storage) GetAllCalls(stub func(context.Context, any) error) {
	fake.getAllMutex.Lock()
	defer fake.getAllMutex.Unlock()
	fake.GetAllStub = stub
}

func (fake *Storage) GetAllArgsForCall(i int) (context.Context, any) {
	fake.getAllMutex.RLock()
	defer fake.getAllMutex.RUnlock()
	argsForCall := fake.getAllArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Storage) GetAllReturns(result1 error) {
	fake.getAllMutex.Lock()
	defer fake.getAllMutex.Unlock()
	fake.GetAllStub = nil
	fake.getAllReturns = struct {
		result1 error
	}{result1}
}

func (fake *Storage) GetAllReturnsOnCall(i int, result1 error) {
	fake.getAllMutex.Lock()
	defer fake.getAllMutex.Unlock()
	fake.GetAllStub = nil
	if fake.getAllReturnsOnCall == nil {
		fake.getAllReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getAllReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Storage) GetAllBy(arg1 context.Context, arg2 string, arg3 any, arg4 any) error {
	fake.getAllByMutex.Lock()
	ret, specificReturn := fake.getAllByReturnsOnCall[len(fake.getAllByArgsForCall)]
	fake.getAllByArgsForCall = append(fake.getAllByArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 any
		arg4 any
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetAllByStub
	fakeReturns := fake.getAllByReturns
	fake.recordInvocation("GetAllBy", []interface{}{arg1, arg2, arg3, arg4})
	fake.getAllByMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Storage) GetAllByCallCount() int {
	fake.getAllByMutex.RLock()
	defer fake.getAllByMutex.RUnlock()
	return len(fake.getAllByArgsForCall)
}

func (fake *Storage) GetAllByCalls(stub func(context.Context, string, any, any) error) {
	fake.getAllByMutex.Lock()
	defer fake.getAllByMutex.Unlock()
	fake.GetAllByStub = stub
}

func (fake *Storage) GetAllByArgsForCall(i int) (context.Context, string, any, any) {
	fake.getAllByMutex.RLock()
	defer fake.getAllByMutex.RUnlock()
	argsForCall := fake.getAllByArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *Storage) GetAllByReturns(result1 error) {
	fake.getAllByMutex.Lock()
	defer fake.getAllByMutex.Unlock()
	fake.GetAllByStub = nil
	fake.getAllByReturns = struct {
		result1 error
	}{result1}
}

func (fake *Storage) GetAllByReturnsOnCall(i int, result1 error) {
	fake.getAllByMutex.Lock()
	defer fake.getAllByMutex.Unlock()
	fake.GetAllByStub = nil
	if fake.getAllByReturnsOnCall == nil {
		fake.getAllByReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getAllByReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Storage) GetOneBy(arg1 context.Context, arg2 string, arg3 any, arg4 any) error {
	fake.getOneByMutex.Lock()
	ret, specificReturn := fake.getOneByReturnsOnCall[len(fake.getOneByArgsForCall)]
	fake.getOneByArgsForCall = append(fake.getOneByArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 any
		arg4 any
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetOneByStub
	fakeReturns := fake.getOneByReturns
	fake.recordInvocation("GetOneBy", []interface{}{arg1, arg2, arg3, arg4})
	fake.getOneByMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Storage) GetOneByCallCount() int {
	fake.getOneByMutex.RLock()
	defer fake.getOneByMutex.RUnlock()
	return len(fake.getOneByArgsForCall)
}

func (fake *Storage) GetOneByCalls(stub func(context.Context, string, any, any) error) {
	fake.getOneByMutex.Lock()
	defer fake.getOneByMutex.Unlock()
	fake.GetOneByStub = stub
}

func (fake *Storage) GetOneByArgsForCall(i int) (context.Context, string, any, any) {
	fake.getOneByMutex.RLock()
	defer fake.getOneByMutex.RUnlock()
	argsForCall := fake.getOneByArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *Storage) GetOneByReturns(result1 error) {
	fake.getOneByMutex.Lock()
	defer fake.getOneByMutex.Unlock()
	fake.GetOneByStub = nil
	fake.getOneByReturns = struct {
		result1 error
	}{result1}
}

func (fake *Storage) GetOneByReturnsOnCall(i int, result1 error) {
	fake.getOneByMutex.Lock()
	defer fake.getOneByMutex.Unlock()
	fake.GetOneByStub = nil
	if fake.getOneByReturnsOnCall == nil {
		fake.getOneByReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getOneByReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Storage) InsertToTable(arg1 context.Context, arg2 any) error {
	fake.insertToTableMutex.Lock()
	ret, specificReturn := fake.insertToTableReturnsOnCall[len(fake.insertToTableArgsForCall)]
	fake.insertToTableArgsForCall = append(fake.insertToTableArgsForCall, struct {
		arg1 context.Context
		arg2 any
	}{arg1, arg2})
	stub := fake.InsertToTableStub
	fakeReturns := fake.insertToTableReturns
	fake.recordInvocation("InsertToTable", []interface{}{arg1, arg2})
	fake.insertToTableMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Storage) InsertToTableCallCount() int {
	fake.insertToTableMutex.RLock()
	defer fake.insertToTableMutex.RUnlock()
	return len(fake.insertToTableArgsForCall)
}

func (fake *Storage) InsertToTableCalls(stub func(context.Context, any) error) {
	fake.insertToTableMutex.Lock()
	defer fake.insertToTableMutex.Unlock()
	fake.InsertToTableStub = stub
}

func (fake *Storage) InsertToTableArgsForCall(i int) (context.Context, any) {
	fake.insertToTableMutex.RLock()
	defer fake.insertToTableMutex.RUnlock()
	argsForCall := fake.insertToTableArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Storage) InsertToTableReturns(result1 error) {
	fake.insertToTableMutex.Lock()
	defer fake.insertToTableMutex.Unlock()
	fake.InsertToTableStub = nil
	fake.insertToTableReturns = struct {
		result1 error
	}{result1}
}

func (fake *Storage) InsertToTableReturnsOnCall(i int, result1 error) {
	fake.insertToTableMutex.Lock()
	defer fake.insertToTableMutex.Unlock()
	fake.InsertToTableStub = nil
	if fake.insertToTableReturnsOnCall == nil {
		fake.insertToTableReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.insertToTableReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Storage) MigrateTable(arg1 ...any) error {
	fake.migrateTableMutex.Lock()
	ret, specificReturn := fake.migrateTableReturnsOnCall[len(fake.migrateTableArgsForCall)]
	fake.migrateTableArgsForCall = append(fake.migrateTableArgsForCall, struct {
		arg1 []any
	}{arg1})
	stub := fake.MigrateTableStub
	fakeReturns := fake.migrateTableReturns
	fake.recordInvocation("MigrateTable", []interface{}{arg1})
	fake.migrateTableMutex.Unlock()
	if stub != nil {
		return stub(arg1...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Storage) MigrateTableCallCount() int {
	fake.migrateTableMutex.RLock()
	defer fake.migrateTableMutex.RUnlock()
	return len(fake.migrateTableArgsForCall)
}

func (fake *Storage) MigrateTableCalls(stub func(...any) error) {
	fake.migrateTableMutex.Lock()
	defer fake.migrateTableMutex.Unlock()
	fake.MigrateTableStub = stub
}

func (fake *Storage) MigrateTableArgsForCall(i int) []any {
	fake.migrateTableMutex.RLock()
	defer fake.migrateTableMutex.RUnlock()
	argsForCall := fake.migrateTableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Storage) MigrateTableReturns(result1 error) {
	fake.migrateTableMutex.Lock()
	defer fake.migrateTableMutex.Unlock()
	fake.MigrateTableStub = nil
	fake.migrateTableReturns = struct {
		result1 error
	}{result1}
}

func (fake *Storage) MigrateTableReturnsOnCall(i int, result1 error) {
	fake.migrateTableMutex.Lock()
	defer fake.migrateTableMutex.Unlock()
	fake.MigrateTableStub = nil
	if fake.migrateTableReturnsOnCall == nil {
		fake.migrateTableReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.migrateTableReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Storage) SeedTable(arg1 context.Context, arg2 any) error {
	fake.seedTableMutex.Lock()
	ret, specificReturn := fake.seedTableReturnsOnCall[len(fake.seedTableArgsForCall)]
	fake.seedTableArgsForCall = append(fake.seedTableArgsForCall, struct {
		arg1 context.Context
		arg2 any
	}{arg1, arg2})
	stub := fake.SeedTableStub
	fakeReturns := fake.seedTableReturns
	fake.recordInvocation("SeedTable", []interface{}{arg1, arg2})
	fake.seedTableMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Storage) SeedTableCallCount() int {
	fake.seedTableMutex.RLock()
	defer fake.seedTableMutex.RUnlock()
	return len(fake.seedTableArgsForCall)
}

func (fake *Storage) SeedTableCalls(stub func(context.Context, any) error) {
	fake.seedTableMutex.Lock()
	defer fake.seedTableMutex.Unlock()
	fake.SeedTableStub = stub
}

func (fake *Storage) SeedTableArgsForCall(i int) (context.Context, any) {
	fake.seedTableMutex.RLock()
	defer fake.seedTableMutex.RUnlock()
	argsForCall := fake.seedTableArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Storage) SeedTableReturns(result1 error) {
	fake.seedTableMutex.Lock()
	defer fake.seedTableMutex.Unlock()
	fake.SeedTableStub = nil
	fake.seedTableReturns = struct {
		result1 error
	}{result1}
}

func (fake *Storage) SeedTableReturnsOnCall(i int, result1 error) {
	fake.seedTableMutex.Lock()
	defer fake.seedTableMutex.Unlock()
	fake.SeedTableStub = nil
	if fake.seedTableReturnsOnCall == nil {
		fake.seedTableReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.seedTableReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Storage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAllMutex.RLock()
	defer fake.getAllMutex.RUnlock()
	fake.getAllByMutex.RLock()
	defer fake.getAllByMutex.RUnlock()
	fake.getOneByMutex.RLock()
	defer fake.getOneByMutex.RUnlock()
	fake.insertToTableMutex.RLock()
	defer fake.insertToTableMutex.RUnlock()
	fake.migrateTableMutex.RLock()
	defer fake.migrateTableMutex.RUnlock()
	fake.seedTableMutex.RLock()
	defer fake.seedTableMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Storage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repository.Storage = new(Storage)
